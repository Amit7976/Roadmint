export const tips = [
  "Break big problems into smaller chunks.",
  "Donâ€™t just read, build something.",
  "Take regular breaks using the Pomodoro technique.",
  "Read code more than you write.",
  "Practice debugging â€” it's a superpower!",
  "Write comments that explain why, not just what.",
  "Master your tools â€” VSCode, Git, Terminal.",
  "Use keyboard shortcuts to boost speed.",
  "Keep your code DRY (Donâ€™t Repeat Yourself).",
  "Ask for help â€” itâ€™s a sign of strength, not weakness.",
  "Read documentation before Stack Overflow.",
  "Write tests, even if they're basic.",
  "Consistency beats intensity in learning.",
  "Use version control even for personal projects.",
  "Refactor often, but not prematurely.",
  "Learn one language deeply before jumping to others.",
  "Use meaningful variable names.",
  "Understand how the web works â€” DNS, HTTP, etc.",
  "Donâ€™t chase perfection. Ship it, then improve.",
  "Break projects into features, then into tasks.",
  "Document your code for your future self.",
  "Learn to Google effectively â€” it's a skill.",
  "Debug with console logs, but remove them later.",
  "Always backup before big changes.",
  "Review your code like it was written by someone else.",
  "Keep learning â€” tech evolves fast.",
  "Build a portfolio youâ€™d be proud to show off.",
  "Sleep. Seriously. Tired brains donâ€™t code well.",
  "Donâ€™t underestimate soft skills in tech.",
  "Be curious â€” explore how things work under the hood.",
  "Teach someone else to understand better yourself.",
  "Start with simple UI, make it beautiful later.",
  "Focus on accessibility from day one.",
  "Track your progress â€” journals or blogs help.",
  "Join communities â€” learning alone is hard.",
  "Automate repetitive tasks with scripts.",
  "Keep a 'snippets' file of useful code.",
  "Learn Git branching â€” itâ€™ll save your life.",
  "Celebrate small wins â€” they add up.",
  "Always lint and format your code.",
  "Use semantic HTML â€” your future self (and Google) thanks you.",
  "Mobile-first design isnâ€™t just a buzzword.",
  "Dark mode isnâ€™t just cool â€” it saves your eyes.",
  "Review PRs like a mentor, not a critic.",
  "Understand how async/await works in JS.",
  "Donâ€™t memorize â€” understand the patterns.",
  "Contribute to open-source â€” even small things count.",
  "Donâ€™t fear bugs â€” squash them one at a time.",
  "Use design systems or component libraries to save time.",
  "Timebox your learning sessions.",
  "Always keep a learning backlog.",
  "Read code from experienced developers.",
  "Avoid shiny object syndrome â€” finish what you start.",
  "Use environment variables for secrets!",
  "Donâ€™t code in production (unless you're brave).",
  "Take time to learn regex â€” itâ€™s magic.",
  "Your first idea isnâ€™t always the best. Iterate.",
  "Write pseudocode before real code.",
  "Separate logic from UI.",
  "Learn how APIs work â€” youâ€™ll use them a lot.",
  "Use GitHub stars and gists to save great resources.",
  "A well-named function is better than a long comment.",
  "Use a good terminal theme â€” aesthetics matter.",
  "Balance tutorials with building your own ideas.",
  "Learn keyboard navigation in your code editor.",
  "Donâ€™t code tired or hungry. Thatâ€™s chaos fuel.",
  "Error messages are clues, not curses.",
  "Avoid premature optimization.",
  "Your future self will thank you for good folder structure.",
  "Don't just copy-paste â€” understand what it does.",
  "Build in public. Share what you learn.",
  "Keep UI/UX in mind, even in backend work.",
  "You donâ€™t need a CS degree to be a great dev.",
  "Learn the fundamentals of data structures & algorithms.",
  "Make time for play projects â€” they spark creativity.",
  "Itâ€™s okay to rewrite bad code later.",
  "Try to make your side projects deployable.",
  "Use localStorage/sessionStorage wisely.",
  "Donâ€™t over-engineer â€” keep it simple.",
  "Build things that solve real problems.",
  "Use a to-do list, not your brainâ€™s RAM.",
  "Keep learning keyboard-first workflows.",
  "Know the difference between == and ===.",
  "Write code that explains itself.",
  "Avoid copy-paste from Stack Overflow without understanding.",
  "Build small tools that scratch your own itch.",
  "Try pair programming at least once.",
  "Celebrate your coding streaks!",
  "Make boring tasks fun with gamification.",
  "Try a new language every year â€” even if briefly.",
  "Stay curious â€” even errors teach something.",
  "Never deploy on Friday ðŸ˜….",
  "Use the network tab in dev tools â€” itâ€™s gold.",
  "Write code like itâ€™s open-source.",
  "Build with accessibility in mind (a11y matters).",
  "Practice whiteboarding or sketching ideas.",
  "Take screenshots of bugs â€” theyâ€™re clues.",
  "Use tools like Postman to test APIs.",
  "Try writing tech blogs â€” even short ones.",
  "Say 'I donâ€™t know' more often â€” then learn.",
  "Code is poetry. Make it readable.",
  "Always learn with a project in mind.",
  "Trust the process. Growth is nonlinear.",
  "Enjoy the journey â€” not just the destination.",
];
