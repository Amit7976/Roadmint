export type PageProps = {
  topic: string;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type Topic = {
  title: string;
  subtopic?: string | null;
  difficulty: number;
  marked: boolean;
  note: string;
  timeStamp: Date | null;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type Roadmap = {
  [subject: string]: Topic[];
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type Props = {
  result: Roadmap;
  searchTopic: string;
  triggerRefresh?: () => void;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type HeaderProps = {
  show?: boolean;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type LoadingState = {
  text: string;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type AskAIParams = {
  topic: string;
  setLoading: (loading: boolean) => void;
  setResult: (result: string) => void;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type RoadmapList = Array<{ key: string; data: Roadmap }>;

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type DeleteRoadmapButtonProps = {
  displayName: string;
  roadmaps: RoadmapList;
  activeTab: string | null;
  setRoadmaps: (roadmaps: RoadmapList) => void;
  setActiveTab: (key: string | null) => void;
  itemKey: string;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type Quote = {
  content: string;
  author: string;
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type TriviaData = {
  question: string;
  correct: string;
  options: string[];
  selected?: string;
  answered?: boolean;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type DifficultyLevel = number;

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type DifficultyBadgeProps = {
  level: DifficultyLevel;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type TopicListProps = {
  topics: Roadmap[string];
  subject: string;
  handleComplete: (
    subject: string,
    index: number,
    unmark?: boolean,
    note?: string
  ) => void;
  topicRefs: React.MutableRefObject<
    Record<string, Array<HTMLLIElement | null>>
  >;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type MarkCompleteNoteDialogProps = {
  subject: string;
  topicIndex: number;
  onComplete: (subject: string, index: number, note?: string) => void;
  canMark: boolean;
  isMarked: boolean;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////

export type StreakPageProps = {
  streakData?: {
    current: number;
    longest: number;
    progress: Array<{ date: string; completed: boolean }>;
  };
};
